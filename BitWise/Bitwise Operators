# bitwise operator --> get bits of a number  str = '{:032b}'.format(n)
# right shift n>>1 --> n//2
# and n % 2 == n & 1

def get_bit(n):
    count = -1
    ans = []
    while n >= 1:
        i = n & 1
        ans.append(i)
        n = n >> 1
        count += 1
    for i in range(len(ans) - 1, -1, -1):
        if ans[i] == 1:
            print((2 * ans[i]) ** count)
        count -= 1


get_bit(23)
print("******************")


def right_set_bit(n):
    count = 1
    mask = 1
    while True:
        if n & mask == 1:
            return count
        else:
            n = n >> 1
            count += 1


# first find the n compliment, then add +1 in it. then AND operator for right set bit.
def right_set_bit_gfg_dont_accept(n):
    ans = n & ((-1) * n)
    return ans-1
print("RIGHT SET BIT POSITION")
print(right_set_bit_gfg_dont_accept(8))
print(8,right_set_bit(8))



# Number of 1 Bits//Kernighan's Algorithm
def Kernighan_Algorithm(n):  # finds the number of 1 bits
    # find the right most bit then sub from n
    count = 0
    while n:
        rsb = n & ((-1) * n)
        n = n - rsb
        count += 1
    return count


print(Kernighan_Algorithm(4))
print("**********")


#JOSEPH's Problem
# print the surv if n people are in a circle and and killing is done alternatively
def Joseph_prob(n):
    # ans = 2l + 1 ; n = 2**x + l
    c = 0
    num = n
    while n > 1:
        n = n // 2
        c += 1
    l = num - (2 ** c)
    print(2 * l + 1)
print(Joseph_prob(9))

# Gray Bit Code --> Changing only 1 bit at a time.
def gray_it(n):
    if n == 1:
        return ['0','1']
    else:
        final = []
        res = gray_it(n-1)
        for i in range(len(res)):
            final.append('0'+res[i])
        for i in range(len(res)-1,-1,-1):
            final.append('1'+res[i])
    return final
print(gray_it(3))



#
def reverse(A):
    s = '{:032b}'.format(3)
    print(s)
    s = s[::-1]
    print(int(s,2))
rev(3)
