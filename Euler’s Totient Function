## Theoram 1 : if n is prime then phi(n) = n-1
## Theoram 2 : if n = p^x then phi(n) = p^x - p^x-1 ; p is prime
##Theoram 3 : if n doesn't satify the above conditions then, break it into parts then apply theoram 2 and multiply it.
## Direct Formulae for findind the phi(n) = n * f(1-1/p)
## for e.g n = 36 then, (2,3) prime then phi(36)= 36*(1-1/2)*(1-1/3) = 12

def find_prime(n):
    i = 2
    prime = []
    while i*i <= n:
        if n%i == 0:
            n = n//i
            prime.append(i)
        else:
            i += 1
    if n>=2:
        prime.append(n)
    return prime

def phi(n,x):
    return (n**x) - (n**(x-1))

def theoram(n):
    A = find_prime(n)
    hmap = {}
    for i in A:
        if i in hmap:
            hmap[i] += 1
        else:
            hmap[i] = 1
    ans = None
    for ele in hmap:
        x = phi(ele,hmap[ele])
        if ans == None:
            ans = x
            continue
        ans *= x
    return ans

def direct_formula(n):
    A = find_prime(n)
    ans = n
    prev = None
    for i in A:
        if prev == i:
            continue
        prev = i
        ans *= (1- (1/i))
    return (int(ans))

print(theoram(36))
print(direct_formula(36))
